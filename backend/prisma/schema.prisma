// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Model - Basitleştirilmiş
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  name              String?  // Gerçek isim
  password          String
  profileImage      String?
  bio               String?
  preferences       String   @default("{}") // JSON as string for SQLite
  totalPoints       Int      @default(0)
  dailyCalories     Int      @default(0) // Günlük kalori takibi
  dailyCalorieGoal  Int      @default(2000) // Günlük kalori hedefi
  isAdmin           Boolean  @default(false) // Admin kullanıcılar için
  // Physical info for calorie calculation
  age               Int?
  gender            String?  // 'male' | 'female'
  height            Int?     // cm
  weight            Int?     // kg
  fcmTokens         String   @default("[]") // JSON as string for SQLite
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  recipes           Recipe[]
  comments          Comment[]
  recipeLikes       RecipeLike[]
  recipeViews       RecipeView[]
  calorieEntries    CalorieEntry[]
  familyMemberships FamilyMember[]
  userProgresses    UserProgress[]
  userMealVotes     UserMealVote[]
  sentInvitations   FamilyInvitation[] @relation("SentInvitations")

  @@map("users")
}

// Recipe Model
model Recipe {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String
  difficulty        String   // 'easy' | 'medium' | 'hard'
  prepTime          Int      // dakika
  cookTime          Int      // dakika
  servings          Int
  cuisineType       String
  categories        String   @default("[]") // JSON as string for SQLite
  caloriesPerServing Int?
  nutritionInfo     String?  @default("{}") // JSON as string for SQLite
  ingredients       String   @default("[]") // JSON as string for SQLite
  instructions      String   @default("[]") // JSON as string for SQLite
  images            String   @default("[]") // JSON as string for SQLite
  isApproved        Boolean  @default(false)
  // Sosyal özellikler
  likesCount        Int      @default(0)
  commentsCount     Int      @default(0)
  viewsCount        Int      @default(0)
  trendingScore     Float    @default(0) // Trend algoritması için
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments          Comment[]
  likes             RecipeLike[]
  views             RecipeView[]
  userProgresses    UserProgress[]
  mealVoteOptions   MealVoteOption[]

  @@map("recipes")
}

// Comment Model
model Comment {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  content   String
  rating    Int?     // 1-5 yıldız
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Family Model - Ana farklaştırıcı özellik
model Family {
  id                  String   @id @default(cuid())
  name                String
  adminUserId         String
  dietaryRestrictions String   @default("[]") // JSON as string for SQLite
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  members             FamilyMember[]
  mealVotes           MealVote[]
  invitations         FamilyInvitation[]

  @@map("families")
}

// Family Member Model
model FamilyMember {
  id       String @id @default(cuid())
  familyId String
  userId   String
  role     String @default("member") // 'admin' | 'member'
  joinedAt DateTime @default(now())

  // Relations
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([familyId, userId])
  @@map("family_members")
}

// Meal Vote Model - "Bu akşam ne yesek?" özelliği
model MealVote {
  id          String   @id @default(cuid())
  familyId    String
  title       String   // "Bu akşam ne yemek yapsak?"
  description String?
  endsAt      DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  family      Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  options     MealVoteOption[]
  votes       UserMealVote[]

  @@map("meal_votes")
}

// Meal Vote Option Model
model MealVoteOption {
  id         String @id @default(cuid())
  mealVoteId String
  recipeId   String
  voteCount  Int    @default(0)

  // Relations
  mealVote   MealVote       @relation(fields: [mealVoteId], references: [id], onDelete: Cascade)
  recipe     Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  votes      UserMealVote[]

  @@unique([mealVoteId, recipeId])
  @@map("meal_vote_options")
}

// User Meal Vote Model
model UserMealVote {
  id       String @id @default(cuid())
  userId   String
  voteId   String
  optionId String
  votedAt  DateTime @default(now())

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  vote     MealVote       @relation(fields: [voteId], references: [id], onDelete: Cascade)
  option   MealVoteOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, voteId])
  @@map("user_meal_votes")
}

// User Progress Model - Basit takip sistemi
model UserProgress {
  id               String   @id @default(cuid())
  userId           String
  recipeId         String
  completionStatus String   // 'in_progress' | 'completed' | 'abandoned'
  didEat           Boolean  @default(false) // Yemeği yedi mi?
  startedAt        DateTime @default(now())
  completedAt      DateTime?

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe           Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("user_progress")
}

// Family Invitation Model - Davet sistemi
model FamilyInvitation {
  id              String   @id @default(cuid())
  familyId        String
  inviterUserId   String
  invitedEmail    String?  // Email ile davet
  invitedUsername String?  // Username ile davet
  status          String   @default("pending") // 'pending' | 'accepted' | 'rejected'
  createdAt       DateTime @default(now())
  respondedAt     DateTime?

  // Relations
  family          Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  inviter         User     @relation("SentInvitations", fields: [inviterUserId], references: [id], onDelete: Cascade)

  @@map("family_invitations")
}

// Recipe Like Model - Beğeni sistemi
model RecipeLike {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("recipe_likes")
}

// Recipe View Model - Görüntülenme takibi
model RecipeView {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("recipe_views")
}

// Calorie Entry Model - Kalori girişleri
model CalorieEntry {
  id          String   @id @default(cuid())
  userId      String
  calories    Int
  description String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calorie_entries")
} 